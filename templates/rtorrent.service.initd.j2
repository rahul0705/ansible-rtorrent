#!/bin/bash
# /etc/init.d/rtorrent

### BEGIN INIT INFO
# Provides: rtorrent
# Required-Start: $local_fs $remote_fs
# Required-Stop: $local_fs $remote_fs
# Should-Start: $network
# Should-Stop: $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: rTorrent client
# Description: Starts the rTorrent client
### END INIT INFO

#{{ ansible_managed }}

# Source function library
. /lib/lsb/init-functions

# Filename of server binary
SERVICE="/usr/bin/rtorrent"
# Set of options to run rtorrent with
OPTIONS=""

# Check if rTorrent is running.
check_running() {
  if ! [ -s {{ rtorrent_directory_session }}/rtorrent.lock ];
  then
    echo "rTorrent not running."
    exit 1;
  fi
}

# Get the Process ID of rTorrent from the lockfile
get_pid() {
  PID=$(cat {{ rtorrent_directory_session }}/rtorrent.lock | awk -F: '{print($2)}' | sed "s/[^0-9]//g")
}

# Check if the config file is readable, check the session dir is readable
check_files() {
  if ! [ -r "{{ rtorrent_user_home }}/.rtorrent.rc" ];
  then
    echo "Cannot find readable config file {{ rtorrent_user_home }}/.rtorrent.rc"
    exit 1;
  fi
  if ! [ -d "{{ rtorrent_directory_session }}" ];
  then
    echo "Cannot find readable session directory {{ rtorrent_directory_session }}"
  exit 1;
  fi
}

# Start rTorrent as a service within a tmux session
do_start() {
  check_files;
  if ! [ -s {{ rtorrent_directory_session }}/rtorrent.lock ];
  then
    su - {{ rtorrent_user }} -c "/usr/bin/tmux -S {{ rtorrent_socket_path }} new-session -s rtorrent -n rTorrent -d ${SERVICE} ${OPTIONS}"
    sleep 2;
    do_status;
  else
    get_pid;
    echo "rTorrent is running! (pid ${PID})"
    exit 1;
  fi
}

# Stop rTorrent inside a tmux session
do_stop() {
  check_running;
  su - {{ rtorrent_user }} -c "/usr/bin/tmux -S {{ rtorrent_socket_path }}  send-keys -t rtorrent C-q"
  sleep 3;
  # Check if it closed or not
  if ! [ -s {{ rtorrent_directory_session }}/rtorrent.lock ];
  then
    echo "rTorrent stopped."
  else
    get_pid;
    # Make sure the pid doesn't belong to another process
    if ps ${PID} | grep -sq ${SERVICE};
    then
      if ! [ -s {{ rtorrent_directory_session }}/rtorrent.lock ];
      then
        echo "rTorrent stopped."
      else
        kill -s INT ${PID}
      fi

      # Wait 5 seconds to send the stop request to trackers
      sleep 5;
      if ! [ -s {{ rtorrent_directory_session }}/rtorrent.lock ];
      then
        echo "rTorrent stopped."
      else
        kill ${PID}
        su - {{ rtorrent_user }} -c "rm -f {{ rtorrent_directory_session }}/rtorrent.lock"
        echo "rTorrent killed."
      fi
    else
      PROC="$(ps -o command ${PID} | tail -n 1)"
      echo "Failed to stop rTorrent. Process ${PID} belongs to ${PROC}."
      exit 1;
    fi
  fi
}

# Check if process is running and return PID
do_status() {
  check_running;
  get_pid;
  echo "rTorrent running. (pid ${PID})"
}

# Give a bit more information than status
do_info() {
  check_running;
  get_pid;
  RSS="$(ps -o rss ${PID} | tail -n 1)"
  echo "- Base Path             : {{ rtorrent_user_home }}"
  echo "- Config File           : {{ rtorrent_user_home }}/.rtorrent.rc"
  echo "- tmux Session Name     : rtorrent"
  echo "- rTorrent Session Path : {{ rtorrent_directory_session }}"
  echo "- Process ID            : "${PID}""
  echo "- Memory Usage          : $(expr ${RSS} / 1024) MB (${RSS} kB)"
}

do_connect() {
  check_running;
  su - {{ rtorrent_user }} -c "/usr/bin/tmux -S {{ rtorrent_socket_path }}  attach -t rtorrent"
}

case "$1" in
  start)
    do_start;
    ;;
  stop)
    do_stop;
    ;;
  restart)
    do_stop;
    sleep 1
    do_start;
    ;;
  status)
    do_status;
    ;;
  info)
    do_info
    ;;
  connect)
    do_connect;
    ;;
  *)
    echo "Usage: $(basename $0) {start|stop|restart|status|info|connect}"
    exit 1;
    ;;
esac

exit 0;
